#uiPagination {
  font-size: 12px;
  line-height: 30px;
  text-align: center; }

.SidebarDialog_bg {
  display: none;
  position: fixed;
  background-color: #f0f0f0;
  z-index: 999;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0.7;
  filter: alpha(opacity=70); }

.SidebarDialog_content {
  display: none;
  position: fixed;
  background: #fff;
  z-index: 1000;
  border: 1px solid #ddd;
  -webkit-box-shadow: -4px -4px 12px -2px rgba(51, 51, 102, 0.5), 4px 4px 12px -2px rgba(51, 51, 102, 0.5);
  moz-box-shadow: -4px -4px 12px -2px rgba(51, 51, 102, 0.5), 4px 4px 12px -2px rgba(51, 51, 102, 0.5);
  box-shadow: -4px -4px 12px -2px rgba(51, 51, 102, 0.5), 4px 4px 12px -2px rgba(51, 51, 102, 0.5); }

.ulBox {
  white-space: nowrap; }

.ulBox {
  -webkit-padding-start: 0px;
  padding-left: 25px; }
  .ulBox li {
    list-style: none;
    line-height: 30px;
    font-weight: normal; }
    .ulBox li span.iconBox {
      cursor: pointer; }
    .ulBox li span.nodeTxt:hover {
      font-weight: bold;
      cursor: pointer; }
    .ulBox li span.text-muted:hover {
      font-weight: normal;
      cursor: no-drop; }

html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: border-box; }

.grid_1 {
  width: 6.66667%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_2 {
  width: 15%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_3 {
  width: 23.33333%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_4 {
  width: 31.66667%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_5 {
  width: 40%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_6 {
  width: 48.33333%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_7 {
  width: 56.66667%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_8 {
  width: 65%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_9 {
  width: 73.33333%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_10 {
  width: 81.66667%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_11 {
  width: 90%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.grid_12 {
  width: 98.33333%;
  float: left;
  margin-left: 0.83333%;
  margin-right: 0.83333%; }

.div-body {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto; }
  .div-body:after {
    content: " ";
    display: block;
    clear: both; }
  .div-body .div-title {
    margin-top: 12px; }



/*# sourceMappingURL=data:application/json;base64, */